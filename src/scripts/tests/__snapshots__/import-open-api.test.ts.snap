// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`scripts/import-open-api should parse correctly petstore-expanded.yaml 1`] = `
"/* Generated by restful-react */

import React from \\"react\\";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from \\"restful-react\\";

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

/**
 * A pet.
 */
export type Pet = NewPet & {
  id: number;
};

/**
 * A new pet.
 */
export interface NewPet {
  name: string;
  tag?: string;
}

/**
 * A discriminator example.
 */
export type CatOrDog = Cat | Dog;

/**
 * A cat, meow.
 */
export interface Cat {
  type: \\"cat\\";
  breed: \\"labrador\\" | \\"carlin\\" | \\"beagle\\";
}

/**
 * A dog, wooof.
 */
export interface Dog {
  type: \\"dog\\";
  breed: \\"saimois\\" | \\"bengal\\" | \\"british shorthair\\";
}

/**
 * An error :(
 */
export interface Error {
  code: number;
  message: string;
}

/**
 * Request description
 */
export interface Request {
  action?: (\\"create\\" | \\"read\\" | \\"update\\" | \\"delete\\")[];
}

export type UpdatePetRequestRequestBody = NewPet;

export interface FindPetsQueryParams {
  /**
   * tags to filter by
   */
  tags?: string[];
  /**
   * maximum number of results to return
   */
  limit?: number;
}

export type FindPetsProps = Omit<GetProps<Pet[], Error, FindPetsQueryParams>, \\"path\\">;

/**
 * Returns all pets from the system that the user has access to
 * Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
 * 
 * Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
 * 
 */
export const FindPets = (props: FindPetsProps) => (
  <Get<Pet[], Error, FindPetsQueryParams>
    path={\`/pets\`}
    {...props}
  />
);

export type UseFindPetsProps = Omit<UseGetProps<Pet[], FindPetsQueryParams, void>, \\"path\\">;

/**
 * Returns all pets from the system that the user has access to
 * Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
 * 
 * Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
 * 
 */
export const useFindPets = (props: UseFindPetsProps) => useGet<Pet[], Error, FindPetsQueryParams>(\`/pets\`, { ...props });


export type AddPetProps = Omit<MutateProps<Pet, Error, void, NewPet>, \\"path\\" | \\"verb\\">;

/**
 * Creates a new pet in the store.  Duplicates are allowed
 */
export const AddPet = (props: AddPetProps) => (
  <Mutate<Pet, Error, void, NewPet>
    verb=\\"POST\\"
    path={\`/pets\`}
    {...props}
  />
);

export type UseAddPetProps = Omit<UseMutateProps<Pet, void, NewPet, void>, \\"path\\" | \\"verb\\">;

/**
 * Creates a new pet in the store.  Duplicates are allowed
 */
export const useAddPet = (props: UseAddPetProps) => useMutate<Pet, Error, void, NewPet>(\\"POST\\", \`/pets\`, { ...props });


export interface FindPetByIdPathParams {
  id: number
}

export type FindPetByIdProps = Omit<GetProps<Pet, Error, void>, \\"path\\"> & {id: number};

/**
 * Returns a user based on a single ID, if the user does not have access to the pet
 */
export const FindPetById = ({id, ...props}: FindPetByIdProps) => (
  <Get<Pet, Error, void>
    path={\`/pets/\${id}\`}
    {...props}
  />
);

export type UseFindPetByIdProps = Omit<UseGetProps<Pet, void, FindPetByIdPathParams>, \\"path\\"> & FindPetByIdPathParams;

/**
 * Returns a user based on a single ID, if the user does not have access to the pet
 */
export const useFindPetById = ({id, ...props}: UseFindPetByIdProps) => useGet<Pet, Error, void>(({ id }) => \`/pets/\${id}\`, { pathParams: { id }, ...props });


export type DeletePetProps = Omit<MutateProps<void, Error, void, number>, \\"path\\" | \\"verb\\">;

/**
 * deletes a single pet based on the ID supplied
 */
export const DeletePet = (props: DeletePetProps) => (
  <Mutate<void, Error, void, number>
    verb=\\"DELETE\\"
    path={\`/pets\`}
    {...props}
  />
);

export type UseDeletePetProps = Omit<UseMutateProps<void, void, number, void>, \\"path\\" | \\"verb\\">;

/**
 * deletes a single pet based on the ID supplied
 */
export const useDeletePet = (props: UseDeletePetProps) => useMutate<void, Error, void, number>(\\"DELETE\\", \`/pets\`, { ...props });


export interface UpdatePetPathParams {
  id: number
}

export type UpdatePetProps = Omit<MutateProps<Pet, Error, void, UpdatePetRequestRequestBody>, \\"path\\" | \\"verb\\"> & {id: number};

/**
 * Updates a pet in the store.
 */
export const UpdatePet = ({id, ...props}: UpdatePetProps) => (
  <Mutate<Pet, Error, void, UpdatePetRequestRequestBody>
    verb=\\"PATCH\\"
    path={\`/pets/\${id}\`}
    {...props}
  />
);

export type UseUpdatePetProps = Omit<UseMutateProps<Pet, void, UpdatePetRequestRequestBody, UpdatePetPathParams>, \\"path\\" | \\"verb\\"> & UpdatePetPathParams;

/**
 * Updates a pet in the store.
 */
export const useUpdatePet = ({id, ...props}: UseUpdatePetProps) => useMutate<Pet, Error, void, UpdatePetRequestRequestBody>(\\"PATCH\\", ({ id }) => \`/pets/\${id}\`, { pathParams: { id }, ...props });

"
`;
